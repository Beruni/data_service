"use strict";var httpClient=require("http");var user_token="authorization";var AuthenticationService=function(){function AuthenticationService(request){this.userToken=request.headers[user_token]}AuthenticationService.prototype.authenticate=function(response,next){var request=httpClient.request(this.userServiceGetCurrentUserParams(response),function(userResponse){console.log("Got status: "+userResponse.statusCode);if(userResponse.statusCode==200){userResponse.on("data",function(userData){response["userData"]=userData;next()})}else{response.writeHead(userResponse.statusCode);response.end()}}).on("error",function(error){console.log("Got error: "+error.message);response.writeHead(403);if(process.env.NODE_ENV!="production"){response.end(JSON.stringify(error))}else{response.end()}});request.end()};AuthenticationService.prototype.userServiceGetCurrentUserParams=function(response){return{method:"GET",hostname:"127.0.0.1",port:3001,path:"/current_user",headers:{authorization:this.userToken}}};return AuthenticationService}();exports.AuthenticationService=AuthenticationService;"use strict";var httpClient=require("http");var NodeDiscoveryService=function(){function NodeDiscoveryService(){}NodeDiscoveryService.prototype.fetchNodeServers=function(response,next){response["discovery_service"]=this;if(!this.discoveryDataCache&&process.env.DISCOVERY_SERVICE_HOST){var request=httpClient.request(this.getNodeServerUrlParams(),function(discoveryResponse){if(discoveryResponse.statusCode==200){discoveryResponse.on("data",function(discoveryData){console.log("Discovery Data: "+discoveryData);response["discovery_service"].discoveryDataCache=JSON.parse(discoveryData);next()})}else{next()}}).on("error",function(error){console.log("Got discovery error: "+error.message);next()});request.end()}else{next()}};NodeDiscoveryService.prototype.getNodeServerUrlParams=function(){return{method:"GET",hostname:process.env.DISCOVERY_SERVICE_HOST,port:8500,path:"/v1/catalog/service/node"}};NodeDiscoveryService.prototype.clearDiscoveryDataCache=function(){this.discoveryDataCache=[]};NodeDiscoveryService.prototype.serviceParams=function(serviceName){return this.discoveryDataCache.find(function(entry){return entry["ServiceID"].match(serviceName)})};return NodeDiscoveryService}();exports.NodeDiscoveryService=NodeDiscoveryService;
//# sourceMappingURL=./dist/js/src/middleware/index.js.map